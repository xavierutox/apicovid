{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","options","React","useState","value","setValue","inputValue","setInputValue","valores","setValores","estado","setEstado","axios","require","a","get","params","then","res","data","casos","console","log","dif1","parseInt","length","dif2","document","getElementById","innerHTML","String","name","catch","err","className","rel","href","style","display","justifyContent","alignItems","Autocomplete","onChange","event","newValue","buscar","onInputChange","newInputValue","id","width","renderInput","TextField","label","variant","ResponsiveContainer","height","LineChart","margin","top","right","bottom","left","Line","type","dataKey","stroke","CartesianGrid","strokeDasharray","XAxis","YAxis","Tooltip","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.852f0f42.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer} from 'recharts';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport React, {useState, useEffect} from 'react';\n\nfunction App() {\n  \n  const options = ['','Algarrobo', 'Pudahuel','Maipu'];\n  const [value, setValue] = React.useState(options[0]);\n  const [inputValue, setInputValue] = React.useState('');\n  const [valores, setValores] = useState([]);\n  const [estado, setEstado] = useState('');\n\n  const axios = require('axios');\n  async function buscar(value){\n    \n    axios.get(\"http://127.0.0.1:4000/\", {\n        params: {\n            \"comuna\":value\n        }}).then(async (res) => {\n           const data = await res.data.casos;\n           console.log(data)\n           setValores(data)\n           \n           var dif1=parseInt(100*(parseInt(data[data.length - 1].casos)-parseInt(data[data.length - 2].casos))/parseInt(data[data.length - 2].casos))\n           var dif2=parseInt(100*(parseInt(data[data.length - 1].casos)-parseInt(data[data.length - 3].casos))/parseInt(data[data.length - 3].casos))\n            document.getElementById('casos1').innerHTML = \"Casos el \"+String(data[data.length - 1].name)+\": \"+String(data[data.length - 1].casos)\n            document.getElementById('casos2').innerHTML = \"Casos el \"+String(data[data.length - 2].name)+\": \"+String(data[data.length - 2].casos)+\" Diferencia: \"+String(dif1)+\"%\"\n            document.getElementById('casos3').innerHTML = \"Casos el \"+String(data[data.length - 3].name)+\": \"+String(data[data.length - 3].casos)+\" Diferencia: \"+String(dif2)+\"%\"\n            var resultado = 'aa'\n           setEstado(resultado)\n\n        })\n        .catch((err) => {\n            console.log(err);\n        });\n    \n    \n    \n  }\n\n  return (\n    \n    <div className=\"App\">\n      <header className=\"App-header2\">\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />  \n      </header>\n      <body>\n        <div  style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n        >\n        <Autocomplete\n          value={value}\n          onChange={(event, newValue) => {\n            setValue(newValue);\n            buscar(newValue)\n          }}\n          inputValue={inputValue}\n          onInputChange={(event, newInputValue) => {\n            setInputValue(newInputValue);\n          }}\n          id=\"combo-box-demo\"\n          options={options}\n          style={{ width: 300 }}\n          renderInput={(params) => <TextField {...params} label=\"Seleccionar comuna\" variant=\"outlined\"/>}\n        />\n      </div>\n      <div>\n      {estado !== '' && (\n        <ResponsiveContainer width=\"95%\" height={400}>\n          <LineChart  data={valores}\n        margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\n        <Line type=\"monotone\" dataKey=\"casos\" stroke=\"#8884d8\" />\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip/>\n        </LineChart>\n        </ResponsiveContainer>\n\t\t\t)}\n\n\n          \n      </div>\n      <div>\n      <p id='casos1'></p>\n      <p id='casos2'></p>\n      <p id='casos3'></p>\n      </div>\n      </body>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}